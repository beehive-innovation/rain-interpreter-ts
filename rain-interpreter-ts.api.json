{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.33.6",
    "schemaVersion": 1010,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!",
  "docComment": "",
  "name": "@beehiveinnovation/rain-interpreter-ts",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Enum",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps:enum",
          "docComment": "/**\n * All the standard Op Codes\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum AllStandardOps "
            }
          ],
          "fileUrlPath": "dist/rainterpreter/allStandardOps.d.ts",
          "releaseTag": "Public",
          "name": "AllStandardOps",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.ADD:member",
              "docComment": "/**\n * Opcode for addition.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ADD = "
                },
                {
                  "kind": "Content",
                  "text": "40"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ADD"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.ANY:member",
              "docComment": "/**\n * Opcode for ANY.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ANY = "
                },
                {
                  "kind": "Content",
                  "text": "30"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ANY"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.BLOCK_NUMBER:member",
              "docComment": "/**\n * Opcode for the block number.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "BLOCK_NUMBER = "
                },
                {
                  "kind": "Content",
                  "text": "20"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "BLOCK_NUMBER"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.BLOCK_TIMESTAMP:member",
              "docComment": "/**\n * Opcode for the block timestamp.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "BLOCK_TIMESTAMP = "
                },
                {
                  "kind": "Content",
                  "text": "23"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "BLOCK_TIMESTAMP"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.CALL:member",
              "docComment": "/**\n * Execute a source with some inputs taken from the main stack and put the outputs back into the stack.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CALL = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "CALL"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.CALLER:member",
              "docComment": "/**\n * Opcode for the `msg.sender`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CALLER = "
                },
                {
                  "kind": "Content",
                  "text": "21"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "CALLER"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.CHAINLINK_PRICE:member",
              "docComment": "/**\n * Get price from Chainlink Oracle\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CHAINLINK_PRICE = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "CHAINLINK_PRICE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.CONTEXT:member",
              "docComment": "/**\n * stacks an item of the contextual 2D array of values of an underlying contract passed by caller when calling the contract's methods. operand is 2 bytes, each used to index 2D array to access the desired item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CONTEXT = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "CONTEXT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.CONTEXT_ROW:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CONTEXT_ROW = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "CONTEXT_ROW"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.DEBUG:member",
              "docComment": "/**\n * ABI encodes the entire stack and logs it to the hardhat console.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DEBUG = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "DEBUG"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.DIV:member",
              "docComment": "/**\n * Opcode for division\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DIV = "
                },
                {
                  "kind": "Content",
                  "text": "41"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "DIV"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.DO_WHILE:member",
              "docComment": "/**\n * Execute a source until a condition is no longer true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DO_WHILE = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "DO_WHILE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.EAGER_IF:member",
              "docComment": "/**\n * Eager because BOTH x_ and y_ must be eagerly evaluated before EAGER_IF will select one of them. If both x_ and y_ are cheap (e.g. constant values) then this may also be the simplest and cheapest way to select one of them. If either x_ or y_ is expensive consider using the conditional form of OP_SKIP to carefully avoid it instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "EAGER_IF = "
                },
                {
                  "kind": "Content",
                  "text": "31"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "EAGER_IF"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.ENSURE:member",
              "docComment": "/**\n * Require item(s) ot be true or revert, i.e. greater than zero\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ENSURE = "
                },
                {
                  "kind": "Content",
                  "text": "19"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ENSURE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.EQUAL_TO:member",
              "docComment": "/**\n * Opcode for EQUAL_TO.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "EQUAL_TO = "
                },
                {
                  "kind": "Content",
                  "text": "32"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "EQUAL_TO"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.ERC20_BALANCE_OF:member",
              "docComment": "/**\n * Opcode for `IERC20` `balanceOf`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ERC20_BALANCE_OF = "
                },
                {
                  "kind": "Content",
                  "text": "11"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ERC20_BALANCE_OF"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.ERC20_SNAPSHOT_BALANCE_OF_AT:member",
              "docComment": "/**\n * Opcode for `IERC20` use an Snapshot `balanceOfAt`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ERC20_SNAPSHOT_BALANCE_OF_AT = "
                },
                {
                  "kind": "Content",
                  "text": "13"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ERC20_SNAPSHOT_BALANCE_OF_AT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.ERC20_SNAPSHOT_TOTAL_SUPPLY_AT:member",
              "docComment": "/**\n * Opcode for `IERC20` use an Snapshot `totalSupplyAt`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ERC20_SNAPSHOT_TOTAL_SUPPLY_AT = "
                },
                {
                  "kind": "Content",
                  "text": "14"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ERC20_SNAPSHOT_TOTAL_SUPPLY_AT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.ERC20_TOTAL_SUPPLY:member",
              "docComment": "/**\n * Opcode for `IERC20` `totalSupply`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ERC20_TOTAL_SUPPLY = "
                },
                {
                  "kind": "Content",
                  "text": "12"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ERC20_TOTAL_SUPPLY"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.EVERY:member",
              "docComment": "/**\n * Opcode for EVERY.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "EVERY = "
                },
                {
                  "kind": "Content",
                  "text": "33"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "EVERY"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.EXP:member",
              "docComment": "/**\n * Opcode for exponentiation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "EXP = "
                },
                {
                  "kind": "Content",
                  "text": "42"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "EXP"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.EXPLODE32:member",
              "docComment": "/**\n * Splite an uint256 value into 8 seperate 1 byte size values as uint256 each.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "EXPLODE32 = "
                },
                {
                  "kind": "Content",
                  "text": "24"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "EXPLODE32"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.FOLD_CONTEXT:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "FOLD_CONTEXT = "
                },
                {
                  "kind": "Content",
                  "text": "6"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "FOLD_CONTEXT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.GREATER_THAN:member",
              "docComment": "/**\n * Opcode for GREATER_THAN.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "GREATER_THAN = "
                },
                {
                  "kind": "Content",
                  "text": "34"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "GREATER_THAN"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.HASH:member",
              "docComment": "/**\n * Hash (solidty kecca256) item(s) of the stack\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "HASH = "
                },
                {
                  "kind": "Content",
                  "text": "10"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "HASH"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.IERC1155_BALANCE_OF:member",
              "docComment": "/**\n * Opcode for `IERC1155` `balanceOf`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IERC1155_BALANCE_OF = "
                },
                {
                  "kind": "Content",
                  "text": "17"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IERC1155_BALANCE_OF"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.IERC1155_BALANCE_OF_BATCH:member",
              "docComment": "/**\n * Number of provided opcodes for `IERC1155Ops`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IERC1155_BALANCE_OF_BATCH = "
                },
                {
                  "kind": "Content",
                  "text": "18"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IERC1155_BALANCE_OF_BATCH"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.IERC721_BALANCE_OF:member",
              "docComment": "/**\n * Opcode for `IERC721` `balanceOf`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IERC721_BALANCE_OF = "
                },
                {
                  "kind": "Content",
                  "text": "15"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IERC721_BALANCE_OF"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.IERC721_OWNER_OF:member",
              "docComment": "/**\n * Number of provided opcodes for `IERC721Ops`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IERC721_OWNER_OF = "
                },
                {
                  "kind": "Content",
                  "text": "16"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IERC721_OWNER_OF"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.IORDERBOOKV1_VAULT_BALANCE:member",
              "docComment": "/**\n * Opcode to get balance of an orderbook vault\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IORDERBOOKV1_VAULT_BALANCE = "
                },
                {
                  "kind": "Content",
                  "text": "48"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IORDERBOOKV1_VAULT_BALANCE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.ISALEV2_REMAINING_TOKEN_INVENTORY:member",
              "docComment": "/**\n * Put the remaining number of rTKNs of a SaleV2 into the stack. in order words the balance of rTKN of the SaleV2 contract\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ISALEV2_REMAINING_TOKEN_INVENTORY = "
                },
                {
                  "kind": "Content",
                  "text": "49"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ISALEV2_REMAINING_TOKEN_INVENTORY"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.ISALEV2_RESERVE:member",
              "docComment": "/**\n * Address of the reserve of a SaleV2 contract\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ISALEV2_RESERVE = "
                },
                {
                  "kind": "Content",
                  "text": "50"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ISALEV2_RESERVE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.ISALEV2_SALE_STATUS:member",
              "docComment": "/**\n * Status of the a SaleV2 contract, PENDING, LIVE etc\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ISALEV2_SALE_STATUS = "
                },
                {
                  "kind": "Content",
                  "text": "51"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ISALEV2_SALE_STATUS"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.ISALEV2_TOKEN:member",
              "docComment": "/**\n * Address of the rTKN of a SaleV2 contract\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ISALEV2_TOKEN = "
                },
                {
                  "kind": "Content",
                  "text": "52"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ISALEV2_TOKEN"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.ISALEV2_TOTAL_RESERVE_RECEIVED:member",
              "docComment": "/**\n * Put the total number of reserve tokens received by a SaleV2 into the stack. in order words the balance of reserve token of the SaleV2 contract\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ISALEV2_TOTAL_RESERVE_RECEIVED = "
                },
                {
                  "kind": "Content",
                  "text": "53"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ISALEV2_TOTAL_RESERVE_RECEIVED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.ISZERO:member",
              "docComment": "/**\n * Opcode for ISZERO.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ISZERO = "
                },
                {
                  "kind": "Content",
                  "text": "35"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ISZERO"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.ITIERV2_REPORT:member",
              "docComment": "/**\n * Opcode to call `report` on an `ITierV2` contract.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ITIERV2_REPORT = "
                },
                {
                  "kind": "Content",
                  "text": "54"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ITIERV2_REPORT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.ITIERV2_REPORT_TIME_FOR_TIER:member",
              "docComment": "/**\n * Opcode to call `reportTimeForTier` on an `ITierV2` contract.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ITIERV2_REPORT_TIME_FOR_TIER = "
                },
                {
                  "kind": "Content",
                  "text": "55"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ITIERV2_REPORT_TIME_FOR_TIER"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.length:member",
              "docComment": "/**\n * length of available opcodes\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "length = "
                },
                {
                  "kind": "Content",
                  "text": "59"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "length"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.LESS_THAN:member",
              "docComment": "/**\n * Opcode for LESS_THAN.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "LESS_THAN = "
                },
                {
                  "kind": "Content",
                  "text": "36"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "LESS_THAN"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.LOOP_N:member",
              "docComment": "/**\n * Loop over a source for n times\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "LOOP_N = "
                },
                {
                  "kind": "Content",
                  "text": "7"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "LOOP_N"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.MAX:member",
              "docComment": "/**\n * Opcode for maximum.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MAX = "
                },
                {
                  "kind": "Content",
                  "text": "43"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "MAX"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.MIN:member",
              "docComment": "/**\n * Opcode for minimum.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MIN = "
                },
                {
                  "kind": "Content",
                  "text": "44"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "MIN"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.MOD:member",
              "docComment": "/**\n * Opcode for modulo.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MOD = "
                },
                {
                  "kind": "Content",
                  "text": "45"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "MOD"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.MUL:member",
              "docComment": "/**\n * Opcode for multiplication.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MUL = "
                },
                {
                  "kind": "Content",
                  "text": "46"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "MUL"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.READ_MEMORY:member",
              "docComment": "/**\n * Copies a value either off `stack` or `constants` to the top of the stack.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "READ_MEMORY = "
                },
                {
                  "kind": "Content",
                  "text": "8"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "READ_MEMORY"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.SATURATING_ADD:member",
              "docComment": "/**\n * Opcode for saturating addition.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SATURATING_ADD = "
                },
                {
                  "kind": "Content",
                  "text": "37"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "SATURATING_ADD"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.SATURATING_DIFF:member",
              "docComment": "/**\n * Opcode to calculate the tierwise diff of two reports.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SATURATING_DIFF = "
                },
                {
                  "kind": "Content",
                  "text": "56"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "SATURATING_DIFF"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.SATURATING_MUL:member",
              "docComment": "/**\n * Opcode for saturating multiplication.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SATURATING_MUL = "
                },
                {
                  "kind": "Content",
                  "text": "38"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "SATURATING_MUL"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.SATURATING_SUB:member",
              "docComment": "/**\n * Opcode for saturating subtraction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SATURATING_SUB = "
                },
                {
                  "kind": "Content",
                  "text": "39"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "SATURATING_SUB"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.SCALE_BY:member",
              "docComment": "/**\n * Opcode to rescale an arbitrary fixed point number by some OOMs.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SCALE_BY = "
                },
                {
                  "kind": "Content",
                  "text": "28"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "SCALE_BY"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.SCALE18:member",
              "docComment": "/**\n * Opcode to rescale some fixed point number to 18 OOMs in situ.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SCALE18 = "
                },
                {
                  "kind": "Content",
                  "text": "25"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "SCALE18"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.SCALE18_DIV:member",
              "docComment": "/**\n * Opcode for division.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SCALE18_DIV = "
                },
                {
                  "kind": "Content",
                  "text": "26"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "SCALE18_DIV"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.SCALE18_MUL:member",
              "docComment": "/**\n * Opcode for multiplication.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SCALE18_MUL = "
                },
                {
                  "kind": "Content",
                  "text": "27"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "SCALE18_MUL"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.SCALEN:member",
              "docComment": "/**\n * Opcode to rescale an 18 OOMs fixed point number to scale N.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SCALEN = "
                },
                {
                  "kind": "Content",
                  "text": "29"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "SCALEN"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.SELECT_LTE:member",
              "docComment": "/**\n * Opcode to tierwise select the best block lte a reference block.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SELECT_LTE = "
                },
                {
                  "kind": "Content",
                  "text": "57"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "SELECT_LTE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.SET:member",
              "docComment": "/**\n * used as local opcodes i.e. opcodes to stack the contract's storage contents i.e. porperties/variables. operand determines the storage location to be stacked.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SET = "
                },
                {
                  "kind": "Content",
                  "text": "9"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "SET"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.SUB:member",
              "docComment": "/**\n * Opcode for subtraction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SUB = "
                },
                {
                  "kind": "Content",
                  "text": "47"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "SUB"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.THIS_ADDRESS:member",
              "docComment": "/**\n * Opcode for `this` address of the current contract.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "THIS_ADDRESS = "
                },
                {
                  "kind": "Content",
                  "text": "22"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "THIS_ADDRESS"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!AllStandardOps.UPDATE_TIMES_FOR_TIER_RANGE:member",
              "docComment": "/**\n * Opcode to update the timestamp over a range of tiers for a report.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UPDATE_TIMES_FOR_TIER_RANGE = "
                },
                {
                  "kind": "Content",
                  "text": "58"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UPDATE_TIMES_FOR_TIER_RANGE"
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!areEqualStateConfigs:var",
          "docComment": "/**\n * Checks 2 StateConfig objects to see if they are equal or not\n *\n * @param config1 - first StateConfig\n *\n * @param config2 - second StateConfig\n *\n * @returns boolean\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "areEqualStateConfigs: "
            },
            {
              "kind": "Content",
              "text": "(config1: "
            },
            {
              "kind": "Reference",
              "text": "StateConfig",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!StateConfig:type"
            },
            {
              "kind": "Content",
              "text": ", config2: "
            },
            {
              "kind": "Reference",
              "text": "StateConfig",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!StateConfig:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "areEqualStateConfigs",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!arrayify:var",
          "docComment": "/**\n * ethers arrayify\n *\n * @see\n *\n * ethers.arrayify\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "arrayify: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "ethers.utils.arrayify",
              "canonicalReference": "@ethersproject/bytes!arrayify:function"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "arrayify",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!bytify:var",
          "docComment": "/**\n * Converts a value to raw bytes representation. Assumes `value` is less than or equal to 1 byte, unless a desired `bytesLength` is specified.\n *\n * @param value - value to convert to raw bytes format\n *\n * @param bytesLength - (defaults to 1) number of bytes to left pad if `value` doesn't completely fill the desired amount of memory. Will throw `InvalidArgument` error if value already exceeds bytes length.\n *\n * @returns raw bytes representation as Uint8Array\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "bytify: "
            },
            {
              "kind": "Content",
              "text": "(value: number | "
            },
            {
              "kind": "Reference",
              "text": "BytesLike",
              "canonicalReference": "@ethersproject/bytes!BytesLike:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "utils.Hexable",
              "canonicalReference": "@ethersproject/bytes!Hexable:interface"
            },
            {
              "kind": "Content",
              "text": ", bytesLength?: number) => "
            },
            {
              "kind": "Reference",
              "text": "BytesLike",
              "canonicalReference": "@ethersproject/bytes!BytesLike:type"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "bytify",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!callOperand:function(1)",
          "docComment": "/**\n * Constructs the operand for RainInterpreter's `CALL` opcode by packing 3 numbers into a single byte.\n *\n * @param inputSize - number of inputs being passed to the source (range 0-7)\n *\n * @param outputSize - number of output returned by the source (range 1-3)\n *\n * @param sourceIndex - index of function source\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function callOperand(inputSize: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", outputSize: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", sourceIndex: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "inputSize",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "outputSize",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "sourceIndex",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "callOperand"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!CallOptions:type",
          "docComment": "/**\n * Options for instantiating RainInterpreterTs\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CallOptions = "
            },
            {
              "kind": "Content",
              "text": "{\n    caller?: string;\n    chainId?: number;\n    thisAddress?: string | "
            },
            {
              "kind": "Reference",
              "text": "Contract",
              "canonicalReference": "@ethersproject/contracts!Contract:class"
            },
            {
              "kind": "Content",
              "text": ";\n    opmeta?: "
            },
            {
              "kind": "Reference",
              "text": "FunctionPointerOpMeta",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!FunctionPointerOpMeta:type"
            },
            {
              "kind": "Content",
              "text": "[];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/interpreter/types.d.ts",
          "releaseTag": "Public",
          "name": "CallOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!callSize:function(1)",
          "docComment": "/**\n * Constructs the operand for RainVM's `zipmap` opcode by packing 3 numbers into a single byte. All parameters use zero-based counting i.e. an `fnSize` of 0 means to allocate one element (32 bytes) on the stack to define your functions, while an `fnSize` of 3 means to allocate all four elements (4 * 32 bytes) on the stack.\n *\n * @param sourceIndex - index of function source in `immutableSourceConfig.sources`\n *\n * @param loopSize - number of times to subdivide vals, reduces uint size but allows for more vals (range 0-7)\n *\n * @param valSize - number of vals in outer stack (range 0-7)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function callSize(sourceIndex: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", loopSize: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", valSize: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "sourceIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "loopSize",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "valSize",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "callSize"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!concat:var",
          "docComment": "/**\n * ethers concat\n *\n * @see\n *\n * ethers.concat\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "concat: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "ethers.utils.concat",
              "canonicalReference": "@ethersproject/bytes!concat:function"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "concat",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!Debug:enum",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum Debug "
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "releaseTag": "Public",
          "name": "Debug",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!Debug.Stack:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Stack = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Stack"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!Debug.StatePacked:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "StatePacked = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "StatePacked"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!deepFreeze:function(1)",
          "docComment": "/**\n * Deeply freezes an object, all of the properties of propterties gets frozen\n *\n * @param object - object to freez\n *\n * @returns frozen object\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function deepFreeze(object: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "deepFreeze"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!eighteenZeros:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "eighteenZeros = "
            },
            {
              "kind": "Content",
              "text": "\"1000000000000000000\""
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "eighteenZeros",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!extractFromMap:function(1)",
          "docComment": "/**\n * Extract some of the properites from a Map as a new Map with same keys.\n *\n * @param map - the map to extract from\n *\n * @param properties - name of the properties in second item of the map elements\n *\n * @returns a new Map\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function extractFromMap(map: "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<any, any>"
            },
            {
              "kind": "Content",
              "text": ", properties: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<any, any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "map",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            },
            {
              "parameterName": "properties",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "extractFromMap"
        },
        {
          "kind": "Function",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!extractFromRecord:function(1)",
          "docComment": "/**\n * Extract some of the properties from a Record as new Record with same keys.\n *\n * @param record - the record to extract from.\n *\n * @param properties - name of the properties in value item of the key/va;ue pair of a Record object\n *\n * @returns a new Record i.e. a new key/value pair object\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function extractFromRecord<T extends "
            },
            {
              "kind": "Content",
              "text": "string | number | symbol"
            },
            {
              "kind": "Content",
              "text": ">(record: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<T, any>"
            },
            {
              "kind": "Content",
              "text": ", properties: "
            },
            {
              "kind": "Content",
              "text": "string | string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<T, any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "record",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "properties",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "extractFromRecord"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!fixedPointDiv:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "fixedPointDiv: "
            },
            {
              "kind": "Content",
              "text": "(value1: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ", value2: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ", scale: number) => "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            }
          ],
          "fileUrlPath": "dist/lib/FixedPointMath.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "fixedPointDiv",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!fixedPointMul:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "fixedPointMul: "
            },
            {
              "kind": "Content",
              "text": "(value1: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ", value2: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ", scale: number) => "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            }
          ],
          "fileUrlPath": "dist/lib/FixedPointMath.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "fixedPointMul",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!FunctionPointerOpMeta:type",
          "docComment": "/**\n * An type for creating a key/value pair of opcodes functions to override.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type FunctionPointerOpMeta = "
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "OpMeta",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!OpMeta:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    functionPointer: "
            },
            {
              "kind": "Reference",
              "text": "tsOp",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!tsOp:type"
            },
            {
              "kind": "Content",
              "text": ";\n})"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types.d.ts",
          "releaseTag": "Public",
          "name": "FunctionPointerOpMeta",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!Hexable:type",
          "docComment": "/**\n * A native type for ethers Hexable\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Hexable = "
            },
            {
              "kind": "Reference",
              "text": "utils.Hexable",
              "canonicalReference": "@ethersproject/bytes!Hexable:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "releaseTag": "Public",
          "name": "Hexable",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!hexlify:var",
          "docComment": "/**\n * ethers hexlify\n *\n * @see\n *\n * ethers.hexlify\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "hexlify: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "ethers.utils.hexlify",
              "canonicalReference": "@ethersproject/bytes!hexlify:function"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "hexlify",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!hexZeroPad:var",
          "docComment": "/**\n * ethers hexZeroPad\n *\n * @see\n *\n * ethers.hexZeroPad\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "hexZeroPad: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "ethers.utils.hexZeroPad",
              "canonicalReference": "@ethersproject/bytes!hexZeroPad:function"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "hexZeroPad",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!isBigNumberish:function(1)",
          "docComment": "/**\n * function to check if the a value is of type BigNumberish\n *\n * @param value - the value to check\n *\n * @returns boolean\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isBigNumberish(value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isBigNumberish"
        },
        {
          "kind": "Function",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!loopNOperand:function(1)",
          "docComment": "/**\n * Constructs the operand for RainInterpreter's `LOOP_N` opcode by packing 2 numbers into a single byte.\n *\n * @param n - loop the source for n times (range 0-15)\n *\n * @param sourceIndex - index of function source\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function loopNOperand(n: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", sourceIndex: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "n",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "sourceIndex",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "loopNOperand"
        },
        {
          "kind": "Function",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!mapToRecord:function(1)",
          "docComment": "/**\n * Conver a Map to a equivelant Record (a key/value pair object). Map keys must be of type acceptable by Record constructor, which are string, number or symbol.\n *\n * @param map - The Map to conver to Record\n *\n * @param properties - (optional) properties to pick from the second item of the Map's elements.\n *\n * @returns a new Record (a key/value pait object)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function mapToRecord<K extends "
            },
            {
              "kind": "Content",
              "text": "string | number | symbol"
            },
            {
              "kind": "Content",
              "text": ">(map: "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<K, any>"
            },
            {
              "kind": "Content",
              "text": ", properties?: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<K, any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "map",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "properties",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "mapToRecord"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!max:var",
          "docComment": "/**\n * calculate the maximum among array of BigNumbers\n *\n * @param values - array of BigNumbers to calculate the max value out of them\n *\n * @returns the max of values in BigNumber type\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "max: "
            },
            {
              "kind": "Content",
              "text": "(values: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": "[]) => "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            }
          ],
          "fileUrlPath": "dist/lib/Math.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "max",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!memoryOperand:function(1)",
          "docComment": "/**\n * Constructs operand for standard STATE opecode\n *\n * @param type - Type of the opcode, either 'stack' or 'constant'\n *\n * @param offset - the position of the item in respect to its type\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function memoryOperand(type: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", offset: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "type",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "offset",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "memoryOperand"
        },
        {
          "kind": "Enum",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!MemoryType:enum",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum MemoryType "
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "releaseTag": "Public",
          "name": "MemoryType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!MemoryType.Constant:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Constant = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Constant"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!MemoryType.Stack:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Stack = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Stack"
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!min:var",
          "docComment": "/**\n * calculate the minimum among array of BigNumbers\n *\n * @param values - array of BigNumbers to calculate the min value out of them\n *\n * @returns the min of values in BigNumber type\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "min: "
            },
            {
              "kind": "Content",
              "text": "(values: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": "[]) => "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            }
          ],
          "fileUrlPath": "dist/lib/Math.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "min",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!op:var",
          "docComment": "/**\n * Converts an opcode and operand to bytes, and returns their concatenation.\n *\n * @param code - the opcode\n *\n * @param erand - the operand, currently limited to 1 byte (defaults to 0)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "op: "
            },
            {
              "kind": "Content",
              "text": "(code: number, erand?: number | "
            },
            {
              "kind": "Reference",
              "text": "BytesLike",
              "canonicalReference": "@ethersproject/bytes!BytesLike:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "utils.Hexable",
              "canonicalReference": "@ethersproject/bytes!Hexable:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "op",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!OperandArgConstraints:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type OperandArgConstraints = "
            },
            {
              "kind": "Content",
              "text": "(_value: number, _paramsLength: number) => boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types.d.ts",
          "releaseTag": "Public",
          "name": "OperandArgConstraints",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!OperandDecoder:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type OperandDecoder = "
            },
            {
              "kind": "Content",
              "text": "(_operand: number) => number[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types.d.ts",
          "releaseTag": "Public",
          "name": "OperandDecoder",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!OperandEncoder:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type OperandEncoder = "
            },
            {
              "kind": "Content",
              "text": "(_args: number[], _paramsLength: number) => number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types.d.ts",
          "releaseTag": "Public",
          "name": "OperandEncoder",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!OperandMeta:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type OperandMeta = "
            },
            {
              "kind": "Content",
              "text": "{\n    argsConstraints: "
            },
            {
              "kind": "Reference",
              "text": "OperandArgConstraints",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!OperandArgConstraints:type"
            },
            {
              "kind": "Content",
              "text": "[];\n    encoder: "
            },
            {
              "kind": "Reference",
              "text": "OperandEncoder",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!OperandEncoder:type"
            },
            {
              "kind": "Content",
              "text": ";\n    decoder: "
            },
            {
              "kind": "Reference",
              "text": "OperandDecoder",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!OperandDecoder:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types.d.ts",
          "releaseTag": "Public",
          "name": "OperandMeta",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!OpIO:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type OpIO = "
            },
            {
              "kind": "Content",
              "text": "(_operand: number) => number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types.d.ts",
          "releaseTag": "Public",
          "name": "OpIO",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!OpMeta:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type OpMeta = "
            },
            {
              "kind": "Content",
              "text": "{\n    enum: number;\n    name: string;\n    outputs: "
            },
            {
              "kind": "Reference",
              "text": "OpIO",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!OpIO:type"
            },
            {
              "kind": "Content",
              "text": ";\n    inputs: "
            },
            {
              "kind": "Reference",
              "text": "OpIO",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!OpIO:type"
            },
            {
              "kind": "Content",
              "text": ";\n    operand: "
            },
            {
              "kind": "Reference",
              "text": "OperandMeta",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!OperandMeta:type"
            },
            {
              "kind": "Content",
              "text": ";\n    paramsValidRange: "
            },
            {
              "kind": "Reference",
              "text": "ParamsValidRange",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!ParamsValidRange:type"
            },
            {
              "kind": "Content",
              "text": ";\n    description?: string;\n    aliases?: string[];\n    data?: any;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types.d.ts",
          "releaseTag": "Public",
          "name": "OpMeta",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!overrideFns:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type overrideFns = "
            },
            {
              "kind": "Content",
              "text": "{\n    [key: number]: (_inputs: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": "[], _operand: number, _data?: any) => "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": "[];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/interpreter/types.d.ts",
          "releaseTag": "Public",
          "name": "overrideFns",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!paddedUInt128:var",
          "docComment": "/**\n * Utility function to produce 128 bits size hexString\n *\n * @param value - the value to convert into a 128bit size hexString\n *\n * @returns a 32 character hexString (without 0x prefix)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "paddedUInt128: "
            },
            {
              "kind": "Content",
              "text": "(value: "
            },
            {
              "kind": "Reference",
              "text": "BigNumberish",
              "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
            },
            {
              "kind": "Content",
              "text": ") => string"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "paddedUInt128",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!paddedUInt160:var",
          "docComment": "/**\n * Utility function that transforms a BigNumberish to an ether address (40 char length hexString)\n *\n * @param address - value as bignumberish\n *\n * @returns hexadecimal string as an ether address (40 char length hexString)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "paddedUInt160: "
            },
            {
              "kind": "Content",
              "text": "(address: "
            },
            {
              "kind": "Reference",
              "text": "BigNumberish",
              "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
            },
            {
              "kind": "Content",
              "text": ") => string"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "paddedUInt160",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!paddedUInt256:var",
          "docComment": "/**\n * Utility function that transforms a BigNumberish from the output of the ITierV2 contract report\n *\n * @param report - report as bignumberish from the ITierV2 contract\n *\n * @returns hexadecimal string of the report already padded (64 char hexString)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "paddedUInt256: "
            },
            {
              "kind": "Content",
              "text": "(report: "
            },
            {
              "kind": "Reference",
              "text": "BigNumberish",
              "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
            },
            {
              "kind": "Content",
              "text": ") => string"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "paddedUInt256",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!paddedUInt32:var",
          "docComment": "/**\n * Utility function to produce 32 bits size hexString\n *\n * @param value - the value to convert into a 32bit size hexString\n *\n * @returns a 8 char hexString (without 0x prefix)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "paddedUInt32: "
            },
            {
              "kind": "Content",
              "text": "(value: "
            },
            {
              "kind": "Reference",
              "text": "BigNumberish",
              "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
            },
            {
              "kind": "Content",
              "text": ") => string"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "paddedUInt32",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!paddedUInt64:var",
          "docComment": "/**\n * Utility function to produce 64 bits size hexString\n *\n * @param value - the value to convert into a 64bit size hexString\n *\n * @returns a 16 character hexString (without 0x prefix)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "paddedUInt64: "
            },
            {
              "kind": "Content",
              "text": "(value: "
            },
            {
              "kind": "Reference",
              "text": "BigNumberish",
              "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
            },
            {
              "kind": "Content",
              "text": ") => string"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "paddedUInt64",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!ParamsValidRange:type",
          "docComment": "/**\n * valid number of parameteres an opcode's can have inside its parens\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ParamsValidRange = "
            },
            {
              "kind": "Content",
              "text": "(_paramsLength: number) => boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types.d.ts",
          "releaseTag": "Public",
          "name": "ParamsValidRange",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!parseUnits:var",
          "docComment": "/**\n * ethers parseUnits\n *\n * @see\n *\n * ethers.parseUnits\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "parseUnits: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "ethers.utils.parseUnits",
              "canonicalReference": "@ethersproject/units!parseUnits:function"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "parseUnits",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!RainInterpreterTs:class",
          "docComment": "/**\n * - The javascript version of the RainVM, basically does the same job RainVM does but off-chain.\n *\n * @see\n *\n * RainVM in RainVM.sol\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class RainInterpreterTs "
            }
          ],
          "fileUrlPath": "dist/interpreter/RainInterpreterTs.d.ts",
          "releaseTag": "Public",
          "name": "RainInterpreterTs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!RainInterpreterTs:constructor(1)",
              "docComment": "/**\n * The constructor of RainInterpreterTs which initiates the RainInterpreterTs and also a State for a RainVM script.\n *\n * @param stateConfig - A regular StateConfig used to new a State object to be used in RainInterpreterTs.\n *\n * @param options - (optional) used for initiating the optional properties (caller, provider, thisAddress and applyOpFn)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(stateConfig: "
                },
                {
                  "kind": "Reference",
                  "text": "StateConfig",
                  "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!StateConfig:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "CallOptions",
                  "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!CallOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "stateConfig",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!RainInterpreterTs#caller:member",
              "docComment": "/**\n * An ethers Signer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "caller?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "caller",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!RainInterpreterTs#chainId:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "chainId?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "chainId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!RainInterpreterTs#connect:member(1)",
              "docComment": "/**\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "connect(caller: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "caller",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "connect"
            },
            {
              "kind": "Property",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!RainInterpreterTs#lastState:member",
              "docComment": "/**\n * The result state of the executed Rain TypeScript Interpreter.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly lastState: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "lastState",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!RainInterpreterTs#opmeta:member",
              "docComment": "/**\n * key/value pair of opcodes and their functions for all standard opcodes\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly opmeta: "
                },
                {
                  "kind": "Reference",
                  "text": "FunctionPointerOpMeta",
                  "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!FunctionPointerOpMeta:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "opmeta",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!RainInterpreterTs#overrideFns:member",
              "docComment": "/**\n * functions to override the existing Functions in opmeta\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overrideFns?: "
                },
                {
                  "kind": "Reference",
                  "text": "overrideFns",
                  "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!overrideFns:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "overrideFns",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!RainInterpreterTs#run:member(1)",
              "docComment": "/**\n * Method to execute the RainInterpreterTs.\n *\n * @param data - (optional) Used as additional info for some local opcodes or custom opcode functions i.e. applyOpFn.\n *\n * @param entrypoint - the index of sources to start eval\n *\n * @returns - An array represting the final state of the RainInterpreterTs stack.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "run(caller?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", entrypoint?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", overrideFns?: "
                },
                {
                  "kind": "Reference",
                  "text": "overrideFns",
                  "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!overrideFns:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "caller",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "entrypoint",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "overrideFns",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "run"
            },
            {
              "kind": "Property",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!RainInterpreterTs#self:member",
              "docComment": "/**\n * The thisAddress address of the instance of this class used for THIS_ADDRESS opcode\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "self?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "self",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!RainInterpreterTs#setContract:member(1)",
              "docComment": "/**\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setContract(thisAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "Contract",
                  "canonicalReference": "@ethersproject/contracts!Contract:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "thisAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setContract"
            },
            {
              "kind": "Method",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!RainInterpreterTs#setExpression:member(1)",
              "docComment": "/**\n * Method to set new StateConfig for this Typescript Rain Interpreter class\n *\n * @param stateConfig - StateConfig to set\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setExpression(stateConfig: "
                },
                {
                  "kind": "Reference",
                  "text": "StateConfig",
                  "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!StateConfig:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "stateConfig",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "setExpression"
            },
            {
              "kind": "Property",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!RainInterpreterTs#state:member",
              "docComment": "/**\n * The property of type State which that RainInterpreterTs will run based on.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly state: "
                },
                {
                  "kind": "Reference",
                  "text": "State",
                  "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!State:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "state",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!RainInterpreterTs#StorageRange:member",
              "docComment": "/**\n * Range of available storage variables accessible by eval\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly StorageRange: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "StorageRange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!RainterpreterFunctionPointerOpMeta:var",
          "docComment": "/**\n * All Standard Rainterpreter OpMeta with Function Pointers\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "RainterpreterFunctionPointerOpMeta: "
            },
            {
              "kind": "Reference",
              "text": "FunctionPointerOpMeta",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!FunctionPointerOpMeta:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            }
          ],
          "fileUrlPath": "dist/rainterpreter/RainterpreterFunctionPointerOpMeta.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "RainterpreterFunctionPointerOpMeta",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!recordToMap:function(1)",
          "docComment": "/**\n * Conver a Record (a key/value pair object) to a equivelant Map. Map keys will be of type acceptable by Record constructor, which are string, number or symbol.\n *\n * @param record - The Record to convert to a Map\n *\n * @param properties - (optional) properties to pick from the values of key/value pair items of the Record object.\n *\n * @returns \n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function recordToMap<K extends "
            },
            {
              "kind": "Content",
              "text": "string | number | symbol"
            },
            {
              "kind": "Content",
              "text": ">(record: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<K, any>"
            },
            {
              "kind": "Content",
              "text": ", properties?: "
            },
            {
              "kind": "Content",
              "text": "string | string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<K, any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "record",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "properties",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "recordToMap"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!saturatingAdd:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "saturatingAdd: "
            },
            {
              "kind": "Content",
              "text": "(value1: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ", value2: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            }
          ],
          "fileUrlPath": "dist/lib/SaturatingMath.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "saturatingAdd",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!saturatingDiff:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "saturatingDiff: "
            },
            {
              "kind": "Content",
              "text": "(report1: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ", report2: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            }
          ],
          "fileUrlPath": "dist/lib/TierwiseCombine.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "saturatingDiff",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!saturatingMul:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "saturatingMul: "
            },
            {
              "kind": "Content",
              "text": "(value1: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ", value2: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            }
          ],
          "fileUrlPath": "dist/lib/SaturatingMath.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "saturatingMul",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!saturatingSub:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "saturatingSub: "
            },
            {
              "kind": "Content",
              "text": "(value1: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ", value2: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            }
          ],
          "fileUrlPath": "dist/lib/SaturatingMath.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "saturatingSub",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!scale18:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "scale18: "
            },
            {
              "kind": "Content",
              "text": "(value: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ", scale: number) => "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            }
          ],
          "fileUrlPath": "dist/lib/FixedPointMath.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "scale18",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!scaleBy:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "scaleBy: "
            },
            {
              "kind": "Content",
              "text": "(value: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ", scale: number) => "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            }
          ],
          "fileUrlPath": "dist/lib/FixedPointMath.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "scaleBy",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!scaleN:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "scaleN: "
            },
            {
              "kind": "Content",
              "text": "(value: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ", scale: number) => "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            }
          ],
          "fileUrlPath": "dist/lib/FixedPointMath.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "scaleN",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!selectLte:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "selectLte: "
            },
            {
              "kind": "Content",
              "text": "(reports: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": "[], timestamp: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ", logic: number, mode: number, length: number) => "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            }
          ],
          "fileUrlPath": "dist/lib/TierwiseCombine.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "selectLte",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!selectLteLogic:enum",
          "docComment": "/**\n * An enum for selectLte logic\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum selectLteLogic "
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "releaseTag": "Public",
          "name": "selectLteLogic",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!selectLteLogic.any:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "any = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "any"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!selectLteLogic.every:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "every = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "every"
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!selectLteMode:enum",
          "docComment": "/**\n * An enum for selectLte mode\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum selectLteMode "
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "releaseTag": "Public",
          "name": "selectLteMode",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!selectLteMode.first:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "first = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "first"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!selectLteMode.max:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "max = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "max"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!selectLteMode.min:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "min = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "min"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!selectLteOperand:function(1)",
          "docComment": "/**\n * function to set up the operand for a SELECT_LTE opcode\n *\n * @param logic - 0 = every, 1 = any, acts like a logical and/or for the check against BLOCK_NUMBER\n *\n * @param mode - 0 = min, 1 = max, 2 = first, the way to select the reports that pass the check against BLOCK_NUMBER\n *\n * @param length - the number of reports to stack for SELECT_LTE opcode\n *\n * @returns a byte size number\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function selectLteOperand(logic: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", mode: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", length: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "logic",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "mode",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "length",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "selectLteOperand"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!State:interface",
          "docComment": "/**\n * - An interface, StateJS is basically javascript version of 'State' struct in RainVM, although it doesn't need stackLength and argumentsLength to operate. It receives a regular RainVM in the constructor and initiates the stack for it and all opcodes do their operations to the stack.\n *\n * @see\n *\n * State in RainVM.sol\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface State "
            }
          ],
          "fileUrlPath": "dist/interpreter/types.d.ts",
          "releaseTag": "Public",
          "name": "State",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!State#constants:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly constants: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "constants",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!State#sources:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly sources: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sources",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!State#stack:member",
              "docComment": "/**\n * The RainInterpreterTs's stack.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly stack: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "stack",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!StateConfig:type",
          "docComment": "/**\n * Type of valid parsed expression, i.e. compiled bytes\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type StateConfig = "
            },
            {
              "kind": "Content",
              "text": "{\n    sources: "
            },
            {
              "kind": "Reference",
              "text": "BytesLike",
              "canonicalReference": "@ethersproject/bytes!BytesLike:type"
            },
            {
              "kind": "Content",
              "text": "[];\n    constants: "
            },
            {
              "kind": "Reference",
              "text": "BigNumberish",
              "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
            },
            {
              "kind": "Content",
              "text": "[];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types.d.ts",
          "releaseTag": "Public",
          "name": "StateConfig",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!Tier:enum",
          "docComment": "/**\n * All the contract tier levels availables in all ITier contracts.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum Tier "
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "releaseTag": "Public",
          "name": "Tier",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!Tier.EIGHT:member",
              "docComment": "/**\n * Contract tier level 8.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "EIGHT = "
                },
                {
                  "kind": "Content",
                  "text": "8"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "EIGHT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!Tier.FIVE:member",
              "docComment": "/**\n * Contract tier level 5.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "FIVE = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "FIVE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!Tier.FOUR:member",
              "docComment": "/**\n * Contract tier level 4.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "FOUR = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "FOUR"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!Tier.ONE:member",
              "docComment": "/**\n * Contract tier level 1.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ONE = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ONE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!Tier.SEVEN:member",
              "docComment": "/**\n * Contract tier level 7.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SEVEN = "
                },
                {
                  "kind": "Content",
                  "text": "7"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "SEVEN"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!Tier.SIX:member",
              "docComment": "/**\n * Contract tier level 6.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SIX = "
                },
                {
                  "kind": "Content",
                  "text": "6"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "SIX"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!Tier.THREE:member",
              "docComment": "/**\n * Contract tier level 3.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "THREE = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "THREE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!Tier.TWO:member",
              "docComment": "/**\n * Contract tier level 2.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TWO = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TWO"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!Tier.ZERO:member",
              "docComment": "/**\n * Contract tier level 0. This represent that the uset never has been interacted with the Tier contract.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ZERO = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ZERO"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!tierRange:function(1)",
          "docComment": "/**\n * function to pack start/end tier range into a byte size number for the UPDATE_BLOCKS_FOR_TIER_RANGE opcode\n *\n * @param startTier - the start tier of the updating which ranges between 0 to 8 (exclusive)\n *\n * @param endTier - the end tier of the updating which ranges between 0 to 8 (inclusive)\n *\n * @returns a byte size number\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function tierRange(startTier: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", endTier: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "startTier",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "endTier",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "tierRange"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!tsOp:type",
          "docComment": "/**\n * A type of JSVM opcodes' function's body\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type tsOp = "
            },
            {
              "kind": "Content",
              "text": "{\n    (_inputs: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": "[], _operand: number, _data?: any): "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": "[] | "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": "[]>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types.d.ts",
          "releaseTag": "Public",
          "name": "tsOp",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!updateTimesForTierRange:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "updateTimesForTierRange: "
            },
            {
              "kind": "Content",
              "text": "(report: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ", timestamp: "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            },
            {
              "kind": "Content",
              "text": ", range: number) => "
            },
            {
              "kind": "Reference",
              "text": "BigNumber",
              "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
            }
          ],
          "fileUrlPath": "dist/lib/TierReport.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "updateTimesForTierRange",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@beehiveinnovation/rain-interpreter-ts!zeroPad:var",
          "docComment": "/**\n * ethers zeroPad\n *\n * @see\n *\n * ethers.zeroPad\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "zeroPad: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "ethers.utils.zeroPad",
              "canonicalReference": "@ethersproject/bytes!zeroPad:function"
            }
          ],
          "fileUrlPath": "dist/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "zeroPad",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        }
      ]
    }
  ]
}
