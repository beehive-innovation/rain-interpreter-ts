/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type NoticeStruct = {
  subject: PromiseOrValue<string>;
  data: PromiseOrValue<BytesLike>;
};

export type NoticeStructOutput = [string, string] & {
  subject: string;
  data: string;
};

export interface NoticeBoardInterface extends utils.Interface {
  functions: {
    "createNotices((address,bytes)[])": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "createNotices"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createNotices",
    values: [NoticeStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "createNotices",
    data: BytesLike
  ): Result;

  events: {
    "NewNotice(address,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewNotice"): EventFragment;
}

export interface NewNoticeEventObject {
  sender: string;
  notice: NoticeStructOutput;
}
export type NewNoticeEvent = TypedEvent<
  [string, NoticeStructOutput],
  NewNoticeEventObject
>;

export type NewNoticeEventFilter = TypedEventFilter<NewNoticeEvent>;

export interface NoticeBoard extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NoticeBoardInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createNotices(
      notices_: NoticeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createNotices(
    notices_: NoticeStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createNotices(
      notices_: NoticeStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewNotice(address,tuple)"(
      sender?: null,
      notice?: null
    ): NewNoticeEventFilter;
    NewNotice(sender?: null, notice?: null): NewNoticeEventFilter;
  };

  estimateGas: {
    createNotices(
      notices_: NoticeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createNotices(
      notices_: NoticeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
