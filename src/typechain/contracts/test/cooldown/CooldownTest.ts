/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface CooldownTestInterface extends utils.Interface {
  functions: {
    "getCooldownDuration()": FunctionFragment;
    "getValue()": FunctionFragment;
    "initialize(uint256)": FunctionFragment;
    "setValue(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getCooldownDuration"
      | "getValue"
      | "initialize"
      | "setValue"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getCooldownDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getValue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setValue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCooldownDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setValue", data: BytesLike): Result;

  events: {
    "CooldownInitialize(address,uint256)": EventFragment;
    "CooldownTriggered(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CooldownInitialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CooldownTriggered"): EventFragment;
}

export interface CooldownInitializeEventObject {
  sender: string;
  cooldownDuration: BigNumber;
}
export type CooldownInitializeEvent = TypedEvent<
  [string, BigNumber],
  CooldownInitializeEventObject
>;

export type CooldownInitializeEventFilter =
  TypedEventFilter<CooldownInitializeEvent>;

export interface CooldownTriggeredEventObject {
  caller: string;
  cooldown: BigNumber;
}
export type CooldownTriggeredEvent = TypedEvent<
  [string, BigNumber],
  CooldownTriggeredEventObject
>;

export type CooldownTriggeredEventFilter =
  TypedEventFilter<CooldownTriggeredEvent>;

export interface CooldownTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CooldownTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getCooldownDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    getValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      cooldownDuration_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setValue(
      value_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getCooldownDuration(overrides?: CallOverrides): Promise<BigNumber>;

  getValue(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    cooldownDuration_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setValue(
    value_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getCooldownDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getValue(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      cooldownDuration_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setValue(
      value_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CooldownInitialize(address,uint256)"(
      sender?: null,
      cooldownDuration?: null
    ): CooldownInitializeEventFilter;
    CooldownInitialize(
      sender?: null,
      cooldownDuration?: null
    ): CooldownInitializeEventFilter;

    "CooldownTriggered(address,uint256)"(
      caller?: null,
      cooldown?: null
    ): CooldownTriggeredEventFilter;
    CooldownTriggered(
      caller?: null,
      cooldown?: null
    ): CooldownTriggeredEventFilter;
  };

  estimateGas: {
    getCooldownDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getValue(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      cooldownDuration_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setValue(
      value_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCooldownDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      cooldownDuration_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setValue(
      value_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
