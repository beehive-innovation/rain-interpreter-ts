/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface LibStackTopTestInterface extends utils.Interface {
  functions: {
    "applyFn(uint256[],uint256)": FunctionFragment;
    "applyFn(uint256[])": FunctionFragment;
    "applyFn2Heads(uint256[],uint256)": FunctionFragment;
    "applyFn2Operand(uint256[],uint256)": FunctionFragment;
    "applyFn2Tails(uint256[],uint256)": FunctionFragment;
    "applyFn3Heads(uint256[],uint256)": FunctionFragment;
    "applyFn3Summer(uint256[])": FunctionFragment;
    "applyFnNSummer(uint256[],uint256)": FunctionFragment;
    "applyFnSummer(uint256[])": FunctionFragment;
    "asStackTop(bytes)": FunctionFragment;
    "asStackTop(uint256[])": FunctionFragment;
    "asStackTopAsBytes(bytes)": FunctionFragment;
    "asStackTopAsUint256Array(uint256[])": FunctionFragment;
    "consumeSentinel(uint256[],uint256,uint256)": FunctionFragment;
    "consumeSentinels(uint256[],uint256,uint256,uint256)": FunctionFragment;
    "down(uint256[])": FunctionFragment;
    "down(uint256[],uint256)": FunctionFragment;
    "list(uint256[],uint256)": FunctionFragment;
    "peek(uint256[],uint256)": FunctionFragment;
    "peek(bytes,uint256)": FunctionFragment;
    "peek(uint256[])": FunctionFragment;
    "peek(bytes)": FunctionFragment;
    "peek2(bytes,uint256)": FunctionFragment;
    "peek2(uint256[],uint256)": FunctionFragment;
    "peekUp(uint256[])": FunctionFragment;
    "peekUp(uint256[],uint256)": FunctionFragment;
    "peekUp(bytes)": FunctionFragment;
    "peekUp(bytes,uint256)": FunctionFragment;
    "peekUpStackTop(bytes,uint256)": FunctionFragment;
    "peekUpStackTop(bytes)": FunctionFragment;
    "peekUpStackTop(uint256[])": FunctionFragment;
    "peekUpStackTop(uint256[],uint256)": FunctionFragment;
    "pop(uint256[],uint256)": FunctionFragment;
    "pop(bytes,uint256)": FunctionFragment;
    "push(uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "push(uint256[],uint256[])": FunctionFragment;
    "push(uint256[],uint256)": FunctionFragment;
    "pushWithLength(uint256[],uint256[])": FunctionFragment;
    "set(bytes,uint256,uint256)": FunctionFragment;
    "set(uint256[],uint256,uint256)": FunctionFragment;
    "toIndex(uint256[],uint256[])": FunctionFragment;
    "unalignedPush(bytes,bytes)": FunctionFragment;
    "unalignedPushWithLength(bytes,bytes)": FunctionFragment;
    "up(uint256[])": FunctionFragment;
    "up(uint256[],uint256)": FunctionFragment;
    "upBytes(uint256[],uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "applyFn(uint256[],uint256)"
      | "applyFn(uint256[])"
      | "applyFn2Heads"
      | "applyFn2Operand"
      | "applyFn2Tails"
      | "applyFn3Heads"
      | "applyFn3Summer"
      | "applyFnNSummer"
      | "applyFnSummer"
      | "asStackTop(bytes)"
      | "asStackTop(uint256[])"
      | "asStackTopAsBytes"
      | "asStackTopAsUint256Array"
      | "consumeSentinel"
      | "consumeSentinels"
      | "down(uint256[])"
      | "down(uint256[],uint256)"
      | "list"
      | "peek(uint256[],uint256)"
      | "peek(bytes,uint256)"
      | "peek(uint256[])"
      | "peek(bytes)"
      | "peek2(bytes,uint256)"
      | "peek2(uint256[],uint256)"
      | "peekUp(uint256[])"
      | "peekUp(uint256[],uint256)"
      | "peekUp(bytes)"
      | "peekUp(bytes,uint256)"
      | "peekUpStackTop(bytes,uint256)"
      | "peekUpStackTop(bytes)"
      | "peekUpStackTop(uint256[])"
      | "peekUpStackTop(uint256[],uint256)"
      | "pop(uint256[],uint256)"
      | "pop(bytes,uint256)"
      | "push(uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"
      | "push(uint256[],uint256[])"
      | "push(uint256[],uint256)"
      | "pushWithLength"
      | "set(bytes,uint256,uint256)"
      | "set(uint256[],uint256,uint256)"
      | "toIndex"
      | "unalignedPush"
      | "unalignedPushWithLength"
      | "up(uint256[])"
      | "up(uint256[],uint256)"
      | "upBytes"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "applyFn(uint256[],uint256)",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "applyFn(uint256[])",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "applyFn2Heads",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "applyFn2Operand",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "applyFn2Tails",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "applyFn3Heads",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "applyFn3Summer",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "applyFnNSummer",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "applyFnSummer",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "asStackTop(bytes)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "asStackTop(uint256[])",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "asStackTopAsBytes",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "asStackTopAsUint256Array",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "consumeSentinel",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "consumeSentinels",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "down(uint256[])",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "down(uint256[],uint256)",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "list",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "peek(uint256[],uint256)",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "peek(bytes,uint256)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "peek(uint256[])",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "peek(bytes)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "peek2(bytes,uint256)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "peek2(uint256[],uint256)",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "peekUp(uint256[])",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "peekUp(uint256[],uint256)",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "peekUp(bytes)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "peekUp(bytes,uint256)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "peekUpStackTop(bytes,uint256)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "peekUpStackTop(bytes)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "peekUpStackTop(uint256[])",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "peekUpStackTop(uint256[],uint256)",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pop(uint256[],uint256)",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pop(bytes,uint256)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "push(uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "push(uint256[],uint256[])",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "push(uint256[],uint256)",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pushWithLength",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "set(bytes,uint256,uint256)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "set(uint256[],uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "toIndex",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unalignedPush",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "unalignedPushWithLength",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "up(uint256[])",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "up(uint256[],uint256)",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "upBytes",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "applyFn(uint256[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyFn(uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyFn2Heads",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyFn2Operand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyFn2Tails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyFn3Heads",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyFn3Summer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyFnNSummer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyFnSummer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "asStackTop(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "asStackTop(uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "asStackTopAsBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "asStackTopAsUint256Array",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumeSentinel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumeSentinels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "down(uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "down(uint256[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "peek(uint256[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "peek(bytes,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "peek(uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "peek(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "peek2(bytes,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "peek2(uint256[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "peekUp(uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "peekUp(uint256[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "peekUp(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "peekUp(bytes,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "peekUpStackTop(bytes,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "peekUpStackTop(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "peekUpStackTop(uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "peekUpStackTop(uint256[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pop(uint256[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pop(bytes,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "push(uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "push(uint256[],uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "push(uint256[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushWithLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set(bytes,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set(uint256[],uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unalignedPush",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unalignedPushWithLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "up(uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "up(uint256[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upBytes", data: BytesLike): Result;

  events: {};
}

export interface LibStackTopTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LibStackTopTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "applyFn(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      operand_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "applyFn(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    applyFn2Heads(
      array_: PromiseOrValue<BigNumberish>[],
      length_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    applyFn2Operand(
      array_: PromiseOrValue<BigNumberish>[],
      operand_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    applyFn2Tails(
      array_: PromiseOrValue<BigNumberish>[],
      length_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    applyFn3Heads(
      array_: PromiseOrValue<BigNumberish>[],
      length_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    applyFn3Summer(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    applyFnNSummer(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    applyFnSummer(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "asStackTop(bytes)"(
      bytes_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "asStackTop(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    asStackTopAsBytes(
      bytes_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    asStackTopAsUint256Array(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    consumeSentinel(
      array_: PromiseOrValue<BigNumberish>[],
      sentinel_: PromiseOrValue<BigNumberish>,
      stepSize_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], BigNumber, BigNumber] & {
        stackTopSentinel_: BigNumber;
        arraySentinel_: BigNumber[];
        stackTop_: BigNumber;
        stackBottom_: BigNumber;
      }
    >;

    consumeSentinels(
      array_: PromiseOrValue<BigNumberish>[],
      sentinel_: PromiseOrValue<BigNumberish>,
      stepSize0_: PromiseOrValue<BigNumberish>,
      stepSize1_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], BigNumber[], BigNumber, BigNumber] & {
        stackTopSentinel_: BigNumber;
        arraySentinel0_: BigNumber[];
        arraySentinel1_: BigNumber[];
        stackTop_: BigNumber;
        stackBottom_: BigNumber;
      }
    >;

    "down(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "down(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    list(
      array_: PromiseOrValue<BigNumberish>[],
      length_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "peek(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "peek(bytes,uint256)"(
      bytes_: PromiseOrValue<BytesLike>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "peek(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "peek(bytes)"(
      bytes_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "peek2(bytes,uint256)"(
      bytes_: PromiseOrValue<BytesLike>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "peek2(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "peekUp(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "peekUp(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "peekUp(bytes)"(
      bytes_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "peekUp(bytes,uint256)"(
      bytes_: PromiseOrValue<BytesLike>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "peekUpStackTop(bytes,uint256)"(
      bytes_: PromiseOrValue<BytesLike>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "peekUpStackTop(bytes)"(
      bytes_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "peekUpStackTop(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "peekUpStackTop(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "pop(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "pop(bytes,uint256)"(
      bytes_: PromiseOrValue<BytesLike>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "push(uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      a_: PromiseOrValue<BigNumberish>,
      b_: PromiseOrValue<BigNumberish>,
      c_: PromiseOrValue<BigNumberish>,
      d_: PromiseOrValue<BigNumberish>,
      e_: PromiseOrValue<BigNumberish>,
      f_: PromiseOrValue<BigNumberish>,
      g_: PromiseOrValue<BigNumberish>,
      h_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "push(uint256[],uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      pushArray_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "push(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      a_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pushWithLength(
      array_: PromiseOrValue<BigNumberish>[],
      pushArray_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "set(bytes,uint256,uint256)"(
      bytes_: PromiseOrValue<BytesLike>,
      a_: PromiseOrValue<BigNumberish>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "set(uint256[],uint256,uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      a_: PromiseOrValue<BigNumberish>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toIndex(
      array0_: PromiseOrValue<BigNumberish>[],
      array1_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unalignedPush(
      bytes0_: PromiseOrValue<BytesLike>,
      bytes1_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unalignedPushWithLength(
      bytes0_: PromiseOrValue<BytesLike>,
      bytes1_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "up(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "up(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upBytes(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  "applyFn(uint256[],uint256)"(
    array_: PromiseOrValue<BigNumberish>[],
    operand_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "applyFn(uint256[])"(
    array_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  applyFn2Heads(
    array_: PromiseOrValue<BigNumberish>[],
    length_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  applyFn2Operand(
    array_: PromiseOrValue<BigNumberish>[],
    operand_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  applyFn2Tails(
    array_: PromiseOrValue<BigNumberish>[],
    length_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  applyFn3Heads(
    array_: PromiseOrValue<BigNumberish>[],
    length_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  applyFn3Summer(
    array_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  applyFnNSummer(
    array_: PromiseOrValue<BigNumberish>[],
    n_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  applyFnSummer(
    array_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "asStackTop(bytes)"(
    bytes_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "asStackTop(uint256[])"(
    array_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  asStackTopAsBytes(
    bytes_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  asStackTopAsUint256Array(
    array_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  consumeSentinel(
    array_: PromiseOrValue<BigNumberish>[],
    sentinel_: PromiseOrValue<BigNumberish>,
    stepSize_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber[], BigNumber, BigNumber] & {
      stackTopSentinel_: BigNumber;
      arraySentinel_: BigNumber[];
      stackTop_: BigNumber;
      stackBottom_: BigNumber;
    }
  >;

  consumeSentinels(
    array_: PromiseOrValue<BigNumberish>[],
    sentinel_: PromiseOrValue<BigNumberish>,
    stepSize0_: PromiseOrValue<BigNumberish>,
    stepSize1_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber[], BigNumber[], BigNumber, BigNumber] & {
      stackTopSentinel_: BigNumber;
      arraySentinel0_: BigNumber[];
      arraySentinel1_: BigNumber[];
      stackTop_: BigNumber;
      stackBottom_: BigNumber;
    }
  >;

  "down(uint256[])"(
    array_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "down(uint256[],uint256)"(
    array_: PromiseOrValue<BigNumberish>[],
    n_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  list(
    array_: PromiseOrValue<BigNumberish>[],
    length_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "peek(uint256[],uint256)"(
    array_: PromiseOrValue<BigNumberish>[],
    n_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "peek(bytes,uint256)"(
    bytes_: PromiseOrValue<BytesLike>,
    n_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "peek(uint256[])"(
    array_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "peek(bytes)"(
    bytes_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "peek2(bytes,uint256)"(
    bytes_: PromiseOrValue<BytesLike>,
    n_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "peek2(uint256[],uint256)"(
    array_: PromiseOrValue<BigNumberish>[],
    n_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "peekUp(uint256[])"(
    array_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "peekUp(uint256[],uint256)"(
    array_: PromiseOrValue<BigNumberish>[],
    n_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "peekUp(bytes)"(
    bytes_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "peekUp(bytes,uint256)"(
    bytes_: PromiseOrValue<BytesLike>,
    n_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "peekUpStackTop(bytes,uint256)"(
    bytes_: PromiseOrValue<BytesLike>,
    n_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "peekUpStackTop(bytes)"(
    bytes_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "peekUpStackTop(uint256[])"(
    array_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "peekUpStackTop(uint256[],uint256)"(
    array_: PromiseOrValue<BigNumberish>[],
    n_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "pop(uint256[],uint256)"(
    array_: PromiseOrValue<BigNumberish>[],
    n_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "pop(bytes,uint256)"(
    bytes_: PromiseOrValue<BytesLike>,
    n_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "push(uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
    array_: PromiseOrValue<BigNumberish>[],
    a_: PromiseOrValue<BigNumberish>,
    b_: PromiseOrValue<BigNumberish>,
    c_: PromiseOrValue<BigNumberish>,
    d_: PromiseOrValue<BigNumberish>,
    e_: PromiseOrValue<BigNumberish>,
    f_: PromiseOrValue<BigNumberish>,
    g_: PromiseOrValue<BigNumberish>,
    h_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "push(uint256[],uint256[])"(
    array_: PromiseOrValue<BigNumberish>[],
    pushArray_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "push(uint256[],uint256)"(
    array_: PromiseOrValue<BigNumberish>[],
    a_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pushWithLength(
    array_: PromiseOrValue<BigNumberish>[],
    pushArray_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "set(bytes,uint256,uint256)"(
    bytes_: PromiseOrValue<BytesLike>,
    a_: PromiseOrValue<BigNumberish>,
    n_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "set(uint256[],uint256,uint256)"(
    array_: PromiseOrValue<BigNumberish>[],
    a_: PromiseOrValue<BigNumberish>,
    n_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toIndex(
    array0_: PromiseOrValue<BigNumberish>[],
    array1_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unalignedPush(
    bytes0_: PromiseOrValue<BytesLike>,
    bytes1_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unalignedPushWithLength(
    bytes0_: PromiseOrValue<BytesLike>,
    bytes1_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "up(uint256[])"(
    array_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "up(uint256[],uint256)"(
    array_: PromiseOrValue<BigNumberish>[],
    n_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upBytes(
    array_: PromiseOrValue<BigNumberish>[],
    n_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    "applyFn(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      operand_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "applyFn(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFn2Heads(
      array_: PromiseOrValue<BigNumberish>[],
      length_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFn2Operand(
      array_: PromiseOrValue<BigNumberish>[],
      operand_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFn2Tails(
      array_: PromiseOrValue<BigNumberish>[],
      length_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFn3Heads(
      array_: PromiseOrValue<BigNumberish>[],
      length_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFn3Summer(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFnNSummer(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFnSummer(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "asStackTop(bytes)"(
      bytes_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "asStackTop(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    asStackTopAsBytes(
      bytes_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    asStackTopAsUint256Array(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    consumeSentinel(
      array_: PromiseOrValue<BigNumberish>[],
      sentinel_: PromiseOrValue<BigNumberish>,
      stepSize_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], BigNumber, BigNumber] & {
        stackTopSentinel_: BigNumber;
        arraySentinel_: BigNumber[];
        stackTop_: BigNumber;
        stackBottom_: BigNumber;
      }
    >;

    consumeSentinels(
      array_: PromiseOrValue<BigNumberish>[],
      sentinel_: PromiseOrValue<BigNumberish>,
      stepSize0_: PromiseOrValue<BigNumberish>,
      stepSize1_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], BigNumber[], BigNumber, BigNumber] & {
        stackTopSentinel_: BigNumber;
        arraySentinel0_: BigNumber[];
        arraySentinel1_: BigNumber[];
        stackTop_: BigNumber;
        stackBottom_: BigNumber;
      }
    >;

    "down(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        stackTopBefore_: BigNumber;
        stackTopAfter_: BigNumber;
      }
    >;

    "down(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        stackTopBefore_: BigNumber;
        stackTopAfter_: BigNumber;
      }
    >;

    list(
      array_: PromiseOrValue<BigNumberish>[],
      length_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & { head_: BigNumber; tail_: BigNumber[] }
    >;

    "peek(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "peek(bytes,uint256)"(
      bytes_: PromiseOrValue<BytesLike>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "peek(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "peek(bytes)"(
      bytes_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "peek2(bytes,uint256)"(
      bytes_: PromiseOrValue<BytesLike>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { a_: BigNumber; b_: BigNumber }>;

    "peek2(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { a_: BigNumber; b_: BigNumber }>;

    "peekUp(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "peekUp(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "peekUp(bytes)"(
      bytes_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "peekUp(bytes,uint256)"(
      bytes_: PromiseOrValue<BytesLike>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "peekUpStackTop(bytes,uint256)"(
      bytes_: PromiseOrValue<BytesLike>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "peekUpStackTop(bytes)"(
      bytes_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "peekUpStackTop(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "peekUpStackTop(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pop(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { stackTopAfter_: BigNumber; a_: BigNumber }
    >;

    "pop(bytes,uint256)"(
      bytes_: PromiseOrValue<BytesLike>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { stackTopAfter_: BigNumber; a_: BigNumber }
    >;

    "push(uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      a_: PromiseOrValue<BigNumberish>,
      b_: PromiseOrValue<BigNumberish>,
      c_: PromiseOrValue<BigNumberish>,
      d_: PromiseOrValue<BigNumberish>,
      e_: PromiseOrValue<BigNumberish>,
      f_: PromiseOrValue<BigNumberish>,
      g_: PromiseOrValue<BigNumberish>,
      h_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "push(uint256[],uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      pushArray_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "push(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      a_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pushWithLength(
      array_: PromiseOrValue<BigNumberish>[],
      pushArray_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "set(bytes,uint256,uint256)"(
      bytes_: PromiseOrValue<BytesLike>,
      a_: PromiseOrValue<BigNumberish>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "set(uint256[],uint256,uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      a_: PromiseOrValue<BigNumberish>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toIndex(
      array0_: PromiseOrValue<BigNumberish>[],
      array1_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        index_: BigNumber;
        stackBottom_: BigNumber;
        stackTop_: BigNumber;
      }
    >;

    unalignedPush(
      bytes0_: PromiseOrValue<BytesLike>,
      bytes1_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unalignedPushWithLength(
      bytes0_: PromiseOrValue<BytesLike>,
      bytes1_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "up(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        stackTopBefore_: BigNumber;
        stackTopAfter_: BigNumber;
      }
    >;

    "up(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        stackTopBefore_: BigNumber;
        stackTopAfter_: BigNumber;
      }
    >;

    upBytes(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        stackTopBefore_: BigNumber;
        stackTopAfter_: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    "applyFn(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      operand_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "applyFn(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    applyFn2Heads(
      array_: PromiseOrValue<BigNumberish>[],
      length_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    applyFn2Operand(
      array_: PromiseOrValue<BigNumberish>[],
      operand_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    applyFn2Tails(
      array_: PromiseOrValue<BigNumberish>[],
      length_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    applyFn3Heads(
      array_: PromiseOrValue<BigNumberish>[],
      length_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    applyFn3Summer(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    applyFnNSummer(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    applyFnSummer(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "asStackTop(bytes)"(
      bytes_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "asStackTop(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    asStackTopAsBytes(
      bytes_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    asStackTopAsUint256Array(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    consumeSentinel(
      array_: PromiseOrValue<BigNumberish>[],
      sentinel_: PromiseOrValue<BigNumberish>,
      stepSize_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    consumeSentinels(
      array_: PromiseOrValue<BigNumberish>[],
      sentinel_: PromiseOrValue<BigNumberish>,
      stepSize0_: PromiseOrValue<BigNumberish>,
      stepSize1_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "down(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "down(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    list(
      array_: PromiseOrValue<BigNumberish>[],
      length_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "peek(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "peek(bytes,uint256)"(
      bytes_: PromiseOrValue<BytesLike>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "peek(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "peek(bytes)"(
      bytes_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "peek2(bytes,uint256)"(
      bytes_: PromiseOrValue<BytesLike>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "peek2(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "peekUp(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "peekUp(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "peekUp(bytes)"(
      bytes_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "peekUp(bytes,uint256)"(
      bytes_: PromiseOrValue<BytesLike>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "peekUpStackTop(bytes,uint256)"(
      bytes_: PromiseOrValue<BytesLike>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "peekUpStackTop(bytes)"(
      bytes_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "peekUpStackTop(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "peekUpStackTop(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "pop(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "pop(bytes,uint256)"(
      bytes_: PromiseOrValue<BytesLike>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "push(uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      a_: PromiseOrValue<BigNumberish>,
      b_: PromiseOrValue<BigNumberish>,
      c_: PromiseOrValue<BigNumberish>,
      d_: PromiseOrValue<BigNumberish>,
      e_: PromiseOrValue<BigNumberish>,
      f_: PromiseOrValue<BigNumberish>,
      g_: PromiseOrValue<BigNumberish>,
      h_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "push(uint256[],uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      pushArray_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "push(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      a_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pushWithLength(
      array_: PromiseOrValue<BigNumberish>[],
      pushArray_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "set(bytes,uint256,uint256)"(
      bytes_: PromiseOrValue<BytesLike>,
      a_: PromiseOrValue<BigNumberish>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "set(uint256[],uint256,uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      a_: PromiseOrValue<BigNumberish>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toIndex(
      array0_: PromiseOrValue<BigNumberish>[],
      array1_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unalignedPush(
      bytes0_: PromiseOrValue<BytesLike>,
      bytes1_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unalignedPushWithLength(
      bytes0_: PromiseOrValue<BytesLike>,
      bytes1_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "up(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "up(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upBytes(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "applyFn(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      operand_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "applyFn(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    applyFn2Heads(
      array_: PromiseOrValue<BigNumberish>[],
      length_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    applyFn2Operand(
      array_: PromiseOrValue<BigNumberish>[],
      operand_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    applyFn2Tails(
      array_: PromiseOrValue<BigNumberish>[],
      length_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    applyFn3Heads(
      array_: PromiseOrValue<BigNumberish>[],
      length_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    applyFn3Summer(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    applyFnNSummer(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    applyFnSummer(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "asStackTop(bytes)"(
      bytes_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "asStackTop(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    asStackTopAsBytes(
      bytes_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    asStackTopAsUint256Array(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    consumeSentinel(
      array_: PromiseOrValue<BigNumberish>[],
      sentinel_: PromiseOrValue<BigNumberish>,
      stepSize_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    consumeSentinels(
      array_: PromiseOrValue<BigNumberish>[],
      sentinel_: PromiseOrValue<BigNumberish>,
      stepSize0_: PromiseOrValue<BigNumberish>,
      stepSize1_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "down(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "down(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    list(
      array_: PromiseOrValue<BigNumberish>[],
      length_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "peek(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "peek(bytes,uint256)"(
      bytes_: PromiseOrValue<BytesLike>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "peek(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "peek(bytes)"(
      bytes_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "peek2(bytes,uint256)"(
      bytes_: PromiseOrValue<BytesLike>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "peek2(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "peekUp(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "peekUp(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "peekUp(bytes)"(
      bytes_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "peekUp(bytes,uint256)"(
      bytes_: PromiseOrValue<BytesLike>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "peekUpStackTop(bytes,uint256)"(
      bytes_: PromiseOrValue<BytesLike>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "peekUpStackTop(bytes)"(
      bytes_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "peekUpStackTop(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "peekUpStackTop(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "pop(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "pop(bytes,uint256)"(
      bytes_: PromiseOrValue<BytesLike>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "push(uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      a_: PromiseOrValue<BigNumberish>,
      b_: PromiseOrValue<BigNumberish>,
      c_: PromiseOrValue<BigNumberish>,
      d_: PromiseOrValue<BigNumberish>,
      e_: PromiseOrValue<BigNumberish>,
      f_: PromiseOrValue<BigNumberish>,
      g_: PromiseOrValue<BigNumberish>,
      h_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "push(uint256[],uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      pushArray_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "push(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      a_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pushWithLength(
      array_: PromiseOrValue<BigNumberish>[],
      pushArray_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "set(bytes,uint256,uint256)"(
      bytes_: PromiseOrValue<BytesLike>,
      a_: PromiseOrValue<BigNumberish>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "set(uint256[],uint256,uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      a_: PromiseOrValue<BigNumberish>,
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toIndex(
      array0_: PromiseOrValue<BigNumberish>[],
      array1_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unalignedPush(
      bytes0_: PromiseOrValue<BytesLike>,
      bytes1_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unalignedPushWithLength(
      bytes0_: PromiseOrValue<BytesLike>,
      bytes1_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "up(uint256[])"(
      array_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "up(uint256[],uint256)"(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upBytes(
      array_: PromiseOrValue<BigNumberish>[],
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
