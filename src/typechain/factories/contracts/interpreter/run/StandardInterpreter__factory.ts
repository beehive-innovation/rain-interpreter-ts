/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  StandardInterpreter,
  StandardInterpreterInterface,
} from "../../../../contracts/interpreter/run/StandardInterpreter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "interpreterIntegrity_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bytes[]",
            name: "sources",
            type: "bytes[]",
          },
          {
            internalType: "uint256[]",
            name: "constants",
            type: "uint256[]",
          },
        ],
        indexed: false,
        internalType: "struct StateConfig",
        name: "config",
        type: "tuple",
      },
    ],
    name: "SaveInterpreterState",
    type: "event",
  },
];

const _bytecode =
  "0x60c0604052348015600f57600080fd5b506040516100ca3803806100ca833981016040819052602c916040565b306080526001600160a01b031660a052606e565b600060208284031215605157600080fd5b81516001600160a01b0381168114606757600080fd5b9392505050565b60805160a051603f61008b6000396000505060005050603f6000f3fe6080604052600080fdfea264697066735822122070dfdf9e51b0da03c4ce29f8ffe847a56c18079db537a8f265108c6196b23a2364736f6c63430008110033";

type StandardInterpreterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StandardInterpreterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StandardInterpreter__factory extends ContractFactory {
  constructor(...args: StandardInterpreterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    interpreterIntegrity_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StandardInterpreter> {
    return super.deploy(
      interpreterIntegrity_,
      overrides || {}
    ) as Promise<StandardInterpreter>;
  }
  override getDeployTransaction(
    interpreterIntegrity_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(interpreterIntegrity_, overrides || {});
  }
  override attach(address: string): StandardInterpreter {
    return super.attach(address) as StandardInterpreter;
  }
  override connect(signer: Signer): StandardInterpreter__factory {
    return super.connect(signer) as StandardInterpreter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StandardInterpreterInterface {
    return new utils.Interface(_abi) as StandardInterpreterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StandardInterpreter {
    return new Contract(address, _abi, signerOrProvider) as StandardInterpreter;
  }
}
